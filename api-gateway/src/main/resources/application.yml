server:
  port: 8080

spring:
  application:
    name: gateway-service
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true
      routes:
        - id: authservice
          uri: lb://authservice
          predicates:
            - Path=/api/v1/auth/**
          filters:
            - RewritePath=/api/v1/auth/(?<segment>.*), /api/v1/auth/$\{segment}
            - name: CircuitBreaker
              args:
                name: authService
                fallbackUri: forward:/fallback/authservice
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
                redis-rate-limiter.requestedTokens: 1
                key-resolver: "#{@keyResolver}"
            - name: KeyAuthFilter

        - id: employeeservice
          uri: lb://employeeservice
          predicates:
            - Path=/api/v1/employees/**
          filters:
            - RewritePath=/api/v1/employees/(?<segment>.*), /api/v1/employees/$\{segment}
            - name: CircuitBreaker
              args:
                name: employeeService
                fallbackUri: forward:/fallback/employeeservice
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
                redis-rate-limiter.requestedTokens: 1
                key-resolver: "#{@keyResolver}"
            - name: KeyAuthFilter
            - name: JwtAuthFilter

        # Similar updates for bookservice and borrowservice
        - id: bookservice
          uri: lb://bookservice
          predicates:
            - Path=/api/v1/books/**
          filters:
            - RewritePath=/api/v1/books/(?<segment>.*), /api/v1/books/$\{segment}
            - name: CircuitBreaker
              args:
                name: bookService
                fallbackUri: forward:/fallback/bookservice
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
                redis-rate-limiter.requestedTokens: 1
                key-resolver: "#{@keyResolver}"
            - name: KeyAuthFilter
            - name: JwtAuthFilter

        - id: borrowservice
          uri: lb://borrowservice
          predicates:
            - Path=/api/v1/borrows/**
          filters:
            - RewritePath=/api/v1/borrows/(?<segment>.*), /api/v1/borrows/$\{segment}
            - name: CircuitBreaker
              args:
                name: borrowService
                fallbackUri: forward:/fallback/borrowservice
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
                redis-rate-limiter.requestedTokens: 1
                key-resolver: "#{@keyResolver}"
            - name: KeyAuthFilter
            - name: JwtAuthFilter

# Add JWT configuration
app:
  jwt:
    secret: akdbakjnlkanscknajhf8q27897987s9fnfkxckjvn